apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: service-binding-controller-manager
  name: service-binding-operator
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: bindablekinds.binding.operators.coreos.com
spec:
  group: binding.operators.coreos.com
  names:
    kind: BindableKinds
    listKind: BindableKindsList
    plural: bindablekinds
    singular: bindablekinds
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: BindableKinds is the Schema for the bindablekinds API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          status:
            items:
              description: BindableKindsStatus defines the observed state of BindableKinds
              properties:
                group:
                  type: string
                kind:
                  type: string
                version:
                  type: string
              required:
              - group
              - kind
              - version
              type: object
            type: array
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: clusterworkloadresourcemappings.servicebinding.io
spec:
  group: servicebinding.io
  names:
    kind: ClusterWorkloadResourceMapping
    listKind: ClusterWorkloadResourceMappingList
    plural: clusterworkloadresourcemappings
    singular: clusterworkloadresourcemapping
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    deprecated: true
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: ClusterWorkloadResourceMapping is the Schema for the clusterworkloadresourcemappings
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterWorkloadResourceMappingSpec defines the desired state
              of ClusterWorkloadResourceMapping
            properties:
              versions:
                description: Versions is the collection of versions for a given resource,
                  with mappings.
                items:
                  description: ClusterWorkloadResourceMappingTemplate defines the
                    mapping for a specific version of an workload resource to a logical
                    PodTemplateSpec-like structure.
                  properties:
                    annotations:
                      description: Annotations is a Restricted JSONPath that references
                        the annotations map within the workload resource. These annotations
                        must end up in the resulting Pod, and are generally not the
                        workload resource's annotations. Defaults to `.spec.template.metadata.annotations`.
                      type: string
                    containers:
                      description: Containers is the collection of mappings to container-like
                        fragments of the workload resource. Defaults to mappings appropriate
                        for a PodSpecable resource.
                      items:
                        description: "ClusterWorkloadResourceMappingContainer defines
                          the mapping for a specific fragment of an workload resource
                          to a Container-like structure. \n Each mapping defines exactly
                          one path that may match multiple container-like fragments
                          within the workload resource. For each object matching the
                          path the name, env and volumeMounts expressions are resolved
                          to find those structures."
                        properties:
                          env:
                            description: Env is a Restricted JSONPath that references
                              the slice of environment variables for the container
                              with the container-like workload resource fragment.
                              The referenced location is created if it does not exist.
                              Defaults to `.envs`.
                            type: string
                          name:
                            description: Name is a Restricted JSONPath that references
                              the name of the container with the container-like workload
                              resource fragment. If not defined, container name filtering
                              is ignored.
                            type: string
                          path:
                            description: Path is the JSONPath within the workload
                              resource that matches an existing fragment that is container-like.
                            type: string
                          volumeMounts:
                            description: VolumeMounts is a Restricted JSONPath that
                              references the slice of volume mounts for the container
                              with the container-like workload resource fragment.
                              The referenced location is created if it does not exist.
                              Defaults to `.volumeMounts`.
                            type: string
                        required:
                        - path
                        type: object
                      type: array
                    version:
                      description: Version is the version of the workload resource
                        that this mapping is for.
                      type: string
                    volumes:
                      description: Volumes is a Restricted JSONPath that references
                        the slice of volumes within the workload resource. Defaults
                        to `.spec.template.spec.volumes`.
                      type: string
                  required:
                  - version
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: false
    subresources: {}
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: ClusterWorkloadResourceMapping is the Schema for the clusterworkloadresourcemappings
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterWorkloadResourceMappingSpec defines the desired state
              of ClusterWorkloadResourceMapping
            properties:
              versions:
                description: Versions is the collection of versions for a given resource,
                  with mappings.
                items:
                  description: ClusterWorkloadResourceMappingTemplate defines the
                    mapping for a specific version of an workload resource to a logical
                    PodTemplateSpec-like structure.
                  properties:
                    annotations:
                      description: Annotations is a Restricted JSONPath that references
                        the annotations map within the workload resource. These annotations
                        must end up in the resulting Pod, and are generally not the
                        workload resource's annotations. Defaults to `.spec.template.metadata.annotations`.
                      type: string
                    containers:
                      description: Containers is the collection of mappings to container-like
                        fragments of the workload resource. Defaults to mappings appropriate
                        for a PodSpecable resource.
                      items:
                        description: "ClusterWorkloadResourceMappingContainer defines
                          the mapping for a specific fragment of an workload resource
                          to a Container-like structure. \n Each mapping defines exactly
                          one path that may match multiple container-like fragments
                          within the workload resource. For each object matching the
                          path the name, env and volumeMounts expressions are resolved
                          to find those structures."
                        properties:
                          env:
                            description: Env is a Restricted JSONPath that references
                              the slice of environment variables for the container
                              with the container-like workload resource fragment.
                              The referenced location is created if it does not exist.
                              Defaults to `.envs`.
                            type: string
                          name:
                            description: Name is a Restricted JSONPath that references
                              the name of the container with the container-like workload
                              resource fragment. If not defined, container name filtering
                              is ignored.
                            type: string
                          path:
                            description: Path is the JSONPath within the workload
                              resource that matches an existing fragment that is container-like.
                            type: string
                          volumeMounts:
                            description: VolumeMounts is a Restricted JSONPath that
                              references the slice of volume mounts for the container
                              with the container-like workload resource fragment.
                              The referenced location is created if it does not exist.
                              Defaults to `.volumeMounts`.
                            type: string
                        required:
                        - path
                        type: object
                      type: array
                    version:
                      description: Version is the version of the workload resource
                        that this mapping is for.
                      type: string
                    volumes:
                      description: Volumes is a Restricted JSONPath that references
                        the slice of volumes within the workload resource. Defaults
                        to `.spec.template.spec.volumes`.
                      type: string
                  required:
                  - version
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: service-binding-operator/service-binding-service-cert
    controller-gen.kubebuilder.io/version: v0.7.0
  name: servicebindings.binding.operators.coreos.com
spec:
  group: binding.operators.coreos.com
  names:
    kind: ServiceBinding
    listKind: ServiceBindingList
    plural: servicebindings
    shortNames:
    - sbr
    - sbrs
    singular: servicebinding
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ServiceBindingSpec defines the desired state of ServiceBinding.
            properties:
              application:
                description: Application identifies the application connecting to
                  the backing service.
                properties:
                  bindingPath:
                    description: BindingPath refers to the paths in the application
                      workload's schema where the binding workload would be referenced.  If
                      BindingPath is not specified, then the default path locations
                      are used.  The default location for ContainersPath is "spec.template.spec.containers".  If
                      SecretPath is not specified, then the name of the secret object
                      does not need to be specified.
                    properties:
                      containersPath:
                        description: ContainersPath defines the path to the corev1.Containers
                          reference. If BindingPath is not specified, the default
                          location is "spec.template.spec.containers".
                        type: string
                      secretPath:
                        description: 'SecretPath defines the path to a string field
                          where the name of the secret object is going to be assigned.  Note:
                          The name of the secret object is same as that of the name
                          of service binding custom resource (metadata.name).'
                        type: string
                    type: object
                  group:
                    description: Group of the referent.
                    type: string
                  kind:
                    description: Kind of the referent.
                    type: string
                  labelSelector:
                    description: A label selector is a label query over a set of resources.
                      The result of matchLabels and matchExpressions are ANDed. An
                      empty label selector matches all objects. A null label selector
                      matches no objects.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                  name:
                    description: Name of the referent.
                    type: string
                  resource:
                    description: Resource of the referent.
                    type: string
                  version:
                    description: Version of the referent.
                    type: string
                required:
                - group
                - version
                type: object
              bindAsFiles:
                default: true
                description: BindAsFiles makes the binding values available as files
                  in the application's container.  By default, values are mounted
                  under the path "/bindings"; this can be changed by setting the SERVICE_BINDING_ROOT
                  environment variable.
                type: boolean
              detectBindingResources:
                description: DetectBindingResources is a flag that, when set to true,
                  will cause SBO to search for binding information in the owned resources
                  of the specified services.  If this binding information exists,
                  then the application is bound to these subresources.
                type: boolean
              mappings:
                description: Mappings specifies custom mappings.
                items:
                  description: ServiceBindingMapping defines a new binding from a
                    set of existing bindings.
                  properties:
                    name:
                      description: Name is the name of new binding.
                      type: string
                    value:
                      description: Value specificies a go template that will be rendered
                        and injected into the application.
                      type: string
                  required:
                  - name
                  - value
                  type: object
                type: array
              name:
                description: Name is the name of the service as projected into the
                  workload container.  Defaults to .metadata.name.
                maxLength: 253
                pattern: ^[a-z0-9\-\.]*$
                type: string
              namingStrategy:
                description: 'NamingStrategy defines custom string template for preparing
                  binding names.  It can be set to pre-defined strategies: `none`,
                  `lowercase`, or `uppercase`.  Otherwise, it is treated as a custom
                  go template, and it is handled accordingly.'
                type: string
              services:
                description: Services indicates the backing services to be connected
                  to by an application.  At least one service must be specified.
                items:
                  description: Service defines the selector based on resource name,
                    version, and resource kind.
                  properties:
                    group:
                      description: Group of the referent.
                      type: string
                    id:
                      type: string
                    kind:
                      description: Kind of the referent.
                      type: string
                    name:
                      description: Name of the referent.
                      type: string
                    namespace:
                      description: Namespace of the referent.  If unspecified, assumes
                        the same namespace as ServiceBinding.
                      type: string
                    resource:
                      description: Resource of the referent.
                      type: string
                    version:
                      description: Version of the referent.
                      type: string
                  required:
                  - group
                  - version
                  type: object
                minItems: 1
                type: array
            required:
            - application
            - services
            type: object
          status:
            description: ServiceBindingStatus defines the observed state of ServiceBinding.
            properties:
              conditions:
                description: Conditions describes the state of the operator's reconciliation
                  functionality.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              secret:
                description: Secret indicates the name of the binding secret.
                type: string
            required:
            - secret
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: servicebindings.servicebinding.io
spec:
  group: servicebinding.io
  names:
    kind: ServiceBinding
    listKind: ServiceBindingList
    plural: servicebindings
    singular: servicebinding
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    deprecated: true
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: ServiceBinding is the Schema for the servicebindings API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ServiceBindingSpec defines the desired state of ServiceBinding
            properties:
              env:
                description: Env is the collection of mappings from Secret entries
                  to environment variables
                items:
                  description: EnvMapping defines a mapping from the value of a Secret
                    entry to an environment variable
                  properties:
                    key:
                      description: Key is the key in the Secret that will be exposed
                      type: string
                    name:
                      description: Name is the name of the environment variable
                      type: string
                  required:
                  - key
                  - name
                  type: object
                type: array
              name:
                description: Name is the name of the service as projected into the
                  workload container.  Defaults to .metadata.name.
                maxLength: 253
                pattern: ^[a-z0-9\-\.]*$
                type: string
              provider:
                description: Provider is the provider of the service as projected
                  into the workload container
                type: string
              service:
                description: Service is a reference to an object that fulfills the
                  ProvisionedService duck type
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                required:
                - apiVersion
                - kind
                - name
                type: object
              type:
                description: Type is the type of the service as projected into the
                  workload container
                type: string
              workload:
                description: Workload is a reference to an object
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  containers:
                    description: Containers describes which containers in a Pod should
                      be bound to
                    items:
                      type: string
                    type: array
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  selector:
                    description: Selector is a query that selects the workload or
                      workloads to bind the service to
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                required:
                - apiVersion
                - kind
                type: object
            required:
            - service
            - workload
            type: object
          status:
            description: ServiceBindingStatus defines the observed state of ServiceBinding
            properties:
              binding:
                description: Binding exposes the projected secret for this ServiceBinding
                properties:
                  name:
                    description: 'Name of the referent secret. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                required:
                - name
                type: object
              conditions:
                description: Conditions are the conditions of this ServiceBinding
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the ServiceBinding
                  that was last processed by the controller.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: ServiceBinding is the Schema for the servicebindings API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ServiceBindingSpec defines the desired state of ServiceBinding
            properties:
              env:
                description: Env is the collection of mappings from Secret entries
                  to environment variables
                items:
                  description: EnvMapping defines a mapping from the value of a Secret
                    entry to an environment variable
                  properties:
                    key:
                      description: Key is the key in the Secret that will be exposed
                      type: string
                    name:
                      description: Name is the name of the environment variable
                      type: string
                  required:
                  - key
                  - name
                  type: object
                type: array
              name:
                description: Name is the name of the service as projected into the
                  workload container.  Defaults to .metadata.name.
                type: string
              provider:
                description: Provider is the provider of the service as projected
                  into the workload container
                type: string
              service:
                description: Service is a reference to an object that fulfills the
                  ProvisionedService duck type
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                required:
                - apiVersion
                - kind
                - name
                type: object
              type:
                description: Type is the type of the service as projected into the
                  workload container
                type: string
              workload:
                description: Workload is a reference to an object
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  containers:
                    description: Containers describes which containers in a Pod should
                      be bound to
                    items:
                      type: string
                    type: array
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  selector:
                    description: Selector is a query that selects the workload or
                      workloads to bind the service to
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                required:
                - apiVersion
                - kind
                type: object
            required:
            - service
            - workload
            type: object
          status:
            description: ServiceBindingStatus defines the observed state of ServiceBinding
            properties:
              binding:
                description: Binding exposes the projected secret for this ServiceBinding
                properties:
                  name:
                    description: 'Name of the referent secret. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                required:
                - name
                type: object
              conditions:
                description: Conditions are the conditions of this ServiceBinding
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the ServiceBinding
                  that was last processed by the controller.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: service-binding-operator
  namespace: service-binding-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: service-binding-leader-election-role
  namespace: service-binding-operator
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: service-binding-bindablekinds-viewer-role
rules:
- apiGroups:
  - binding.operators.coreos.com
  resources:
  - bindablekinds
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    servicebinding.io/controller: "true"
  name: service-binding-cloud-native-postgres-viewer-role
rules:
- apiGroups:
  - postgresql.k8s.enterprisedb.io
  resources:
  - clusters
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: service-binding-clusterworkloadresourcemappings-viewer-role
rules:
- apiGroups:
  - servicebinding.io
  resources:
  - clusterworkloadresourcemappings
  verbs:
  - get
  - list
  - watch
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      servicebinding.io/controller: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: service-binding-controller-role
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    servicebinding.io/controller: "true"
  name: service-binding-crunchy-postgres-viewer-role
rules:
- apiGroups:
  - postgres-operator.crunchydata.com
  resources:
  - postgresclusters
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: service-binding-editor-role
rules:
- apiGroups:
  - binding.operators.coreos.com
  - servicebinding.io
  resources:
  - servicebindings
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - binding.operators.coreos.com
  - servicebinding.io
  resources:
  - servicebindings/status
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: service-binding-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - pods
  - secrets
  - services
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - pods
  - secrets
  verbs:
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs:
  - get
  - list
  - patch
  - update
- apiGroups:
  - apps.openshift.io
  resources:
  - deploymentconfigs
  verbs:
  - get
  - list
  - patch
  - update
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - selfsubjectaccessreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - binding.operators.coreos.com
  resources:
  - bindablekinds
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - binding.operators.coreos.com
  resources:
  - bindablekinds/finalizers
  verbs:
  - update
- apiGroups:
  - binding.operators.coreos.com
  resources:
  - bindablekinds/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - binding.operators.coreos.com
  resources:
  - servicebindings
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - binding.operators.coreos.com
  resources:
  - servicebindings/finalizers
  verbs:
  - update
- apiGroups:
  - binding.operators.coreos.com
  resources:
  - servicebindings/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operators.coreos.com
  resources:
  - clusterserviceversions
  verbs:
  - get
  - list
- apiGroups:
  - route.openshift.io
  resources:
  - routes
  verbs:
  - get
  - list
- apiGroups:
  - servicebinding.io
  resources:
  - clusterworkloadresourcemappings
  verbs:
  - get
- apiGroups:
  - servicebinding.io
  resources:
  - servicebindings
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - servicebinding.io
  resources:
  - servicebindings/finalizers
  verbs:
  - update
- apiGroups:
  - servicebinding.io
  resources:
  - servicebindings/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    servicebinding.io/controller: "true"
  name: service-binding-strimzi-kafka-viewer-role
rules:
- apiGroups:
  - kafka.strimzi.io
  resources:
  - kafka
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    servicebinding.io/controller: "true"
  name: service-binding-opstree-redis-viewer-role
rules:
- apiGroups:
  - redis.redis.opstreelabs.in
  resources:
  - redis
  - rediscluster
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    servicebinding.io/controller: "true"
  name: service-binding-percona-mongodb-view
rules:
- apiGroups:
  - psmdb.percona.com
  resources:
  - perconaservermongodbs
  - perconaservermongodbs/status
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    servicebinding.io/controller: "true"
  name: service-binding-percona-mysql-viewer-role
rules:
- apiGroups:
  - pxc.percona.com
  resources:
  - perconaxtradbclusters
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    servicebinding.io/controller: "true"
  name: service-binding-rabbitmq-operator-viewer-role
rules:
- apiGroups:
  - rabbitmq.com
  resources:
  - rabbitmqclusters
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: service-binding-viewer-role
rules:
- apiGroups:
  - binding.operators.coreos.com
  - servicebinding.io
  resources:
  - servicebindings
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - binding.operators.coreos.com
  - servicebinding.io
  resources:
  - servicebindings/status
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: service-binding-leader-election-rolebinding
  namespace: service-binding-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: service-binding-leader-election-role
subjects:
- kind: ServiceAccount
  name: service-binding-operator
  namespace: service-binding-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-binding-bindablekinds-viewer-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: service-binding-bindablekinds-viewer-role
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-binding-clusterworkloadresourcemappings-viewer-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: service-binding-clusterworkloadresourcemappings-viewer-role
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-binding-controller-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: service-binding-controller-role
subjects:
- kind: ServiceAccount
  name: service-binding-operator
  namespace: operators
- kind: ServiceAccount
  name: service-binding-operator
  namespace: openshift-operators
- kind: ServiceAccount
  name: service-binding-operator
  namespace: service-binding-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-binding-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: service-binding-manager-role
subjects:
- kind: ServiceAccount
  name: service-binding-operator
  namespace: service-binding-operator
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: 8fa65150.coreos.com
kind: ConfigMap
metadata:
  name: service-binding-manager-config
  namespace: service-binding-operator
---
apiVersion: v1
kind: Service
metadata:
  name: service-binding-webhook-service
  namespace: service-binding-operator
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: service-binding-controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: service-binding-controller-manager
  name: service-binding-operator
  namespace: service-binding-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: service-binding-controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: service-binding-controller-manager
    spec:
      containers:
      - args:
        - --leader-elect
        - --zap-encoder=json
        - --zap-log-level=info
        command:
        - /manager
        imagePullPolicy: Always
        image: tmaxcloudck/service-binding-operator:1.0.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      serviceAccountName: service-binding-operator
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: service-binding-operator-service-cert
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: service-binding-service-cert
  namespace: service-binding-operator
spec:
  dnsNames:
  - service-binding-webhook-service.service-binding-operator.svc
  - service-binding-webhook-service.service-binding-operator.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: service-binding-selfsigned-issuer
  secretName: service-binding-operator-service-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: service-binding-selfsigned-issuer
  namespace: service-binding-operator
spec:
  selfSigned: {}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: service-binding-operator/service-binding-service-cert
  name: service-binding-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: service-binding-webhook-service
      namespace: service-binding-operator
      path: /mutate-servicebinding
  failurePolicy: Fail
  name: mservicebinding.kb.io
  rules:
  - apiGroups:
    - binding.operators.coreos.com
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - servicebindings
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: service-binding-webhook-service
      namespace: service-binding-operator
      path: /mutate-servicebinding
  failurePolicy: Fail
  name: mspec-servicebinding.kb.io
  rules:
  - apiGroups:
    - servicebinding.io
    apiVersions:
    - v1alpha3
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - servicebindings
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: service-binding-operator/service-binding-service-cert
  name: service-binding-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: service-binding-webhook-service
      namespace: service-binding-operator
      path: /validate-binding-operators-coreos-com-v1alpha1-servicebinding
  failurePolicy: Fail
  name: vservicebinding.kb.io
  rules:
  - apiGroups:
    - binding.operators.coreos.com
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - servicebindings
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: service-binding-webhook-service
      namespace: service-binding-operator
      path: /validate-servicebinding-io-v1beta1-clusterworkloadresourcemapping
  failurePolicy: Fail
  name: vclusterworkloadresourcemapping.kb.io
  rules:
  - apiGroups:
    - servicebinding.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusterworkloadresourcemappings
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: service-binding-webhook-service
      namespace: service-binding-operator
      path: /validate-servicebinding-io-v1beta1-servicebinding
  failurePolicy: Fail
  name: vspecservicebinding.kb.io
  rules:
  - apiGroups:
    - servicebinding.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - servicebindings
  sideEffects: None
